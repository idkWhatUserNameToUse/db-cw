// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         String      @id @default(uuid())
  username   String      @unique
  email      String      @unique
  password   String
  fullNmae   String      @map("full_name")
  members    Member[]

  @@map("users")
}

enum Status {
  COMPLETED
  IN_PROGRESS
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  status      Status
  members     Member[]
  tasks       Task[]

  @@map("projects")
}

model Member {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @map("user_id")
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String        @map("project_id")
  role         Role?
  participants Partipicant[]

  @@map("members")
}

model Role {
  id       String  @id @default(uuid())
  name     String
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String? @unique @map("member)id")
  grants   Grant[]

  @@map("roles")
}

model Grant {
  id          String       @id @default(uuid())
  roleId      String       @map("role_id")
  role        Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissions Permission[]

  @@map("grants")
}

model Permission {
  id         String @id @default(uuid())
  permission String
  grantId    String
  grant      Grant  @relation(fields: [grantId], references: [id], onDelete: Cascade)

  @@map("permissions")
}

model Task {
  id           String        @id @default(uuid())
  name         String
  description  String
  status       Status
  price        String
  deadline     DateTime
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String        @map("project_id")
  participants Partipicant[]

  @@map("tasks")
}

model Partipicant {
  id       String @id @default(uuid())
  name     String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @map("user_id")
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String @map("task_id")

  @@map("partipicants")
}